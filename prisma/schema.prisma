generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  name              String?
  emailVerified     DateTime?
  image             String?
  profileImage      String?  // Professional profile photo URL
  password          String?  // For credentials login
  
  // User role - can be multiple (stored as JSON string)
  roles             String @default("[\"founder\"]") // JSON: ["founder", "service_provider"]
  
  // Founder-specific fields
  founderJourney    String?  // Founder journey stage from onboarding
  title             String?
  bio               String?
  skills            String?  // Store as JSON string or comma-separated
  experience        String?
  lookingFor        String?
  projectLinks      String?  // Store as JSON string
  // Founder Matching Assessment (replaces Big Five)
  assessmentCompleted Boolean @default(false)
  
  // Section 1: Founder Identity & Work Style
  motivation        String?   // What motivates you to build a startup
  founderPersonality String?  // Visionary, Operator, Craftsman, Strategist  
  pressureResponse  String?   // Take control, Collaborate, Withdraw, Escalate
  conflictHandling  String?   // Free text response
  communicationStyle String?  // Direct, Detailed, Casual, Emotional
  bigFiveData       Json?     // Optional: MBTI, Big Five, DISC data
  
  // Section 2: Vision, Commitment & Ambition  
  longTermVision    String?   // Billion-dollar, Lifestyle, Niche problem
  idealExit         String?   // Acquisition, IPO, Long-term operator, Undecided
  weeklyCommitment  Int?      // Hours per week
  fullTimeReady     Boolean?  // Open to full-time commitment
  noPayCommitment   Boolean?  // Willing to go 6+ months with minimal pay
  locationFlexible  Boolean?  // Open to relocating/timezone flexibility
  riskAppetite      Int?      // 1-10 scale
  
  // Section 3: Skills, Strengths & Role Fit
  topSkills         String?   // JSON array of top 3 skills
  weakAreas         String?   // Areas not comfortable leading
  preferredRoles    String?   // JSON array: Product, Tech, Ops, Growth, etc.
  technicalLevel    String?   // Technical, Semi-technical, Non-technical
  portfolioLinks    String?   // JSON: LinkedIn, GitHub, etc.
  biggestAchievement String?  // Hardest thing shipped/achieved
  
  // Section 4: Startup Stage & Domain Fit
  currentStage      String?   // Idea, Validation, MVP, Early Revenue, Scaling
  lookingToJoin     String?   // Start from scratch, Join existing, Find technical, etc.
  passionateIndustries String? // JSON array of industries
  domainExperience  Boolean?  // Has experience/networks in domain
  previousStartupExp Boolean? // Previously worked in startup or founded one
  
  // Section 5: Work Culture & Operating Style  
  workingStyle      String?   // Remote, Hybrid, In-person
  workPreference    String?   // Fast chaos, Methodical, Deep focus, High collab
  timezoneFlexibility String? // Timezone preferences
  meetingRhythm     String?   // Daily, Weekly, Async only
  collaborationScale Int?     // 1-10: Solo execution to constant pairing
  
  // Section 6: Conflict, Equity & Red Flags
  scenarioResponse  String?   // How handle cofounder missing deadline
  equityExpectation String?   // Expected equity percentage  
  dealbreakers      String?   // JSON array of absolute dealbreakers
  previousCofounderExp String? // What worked/didn't work
  
  // Section 7: Optional Psychometrics (moved from main)
  psychometricData  Json?     // Enneagram, conflict modes, emotional regulation
  
  // Legacy Big Five support (optional enhancement)
  quizCompleted     Boolean  @default(false) // Keep for backward compatibility
  quizScores        Json?    // Optional Big Five scores
  personalityProfile Json?   // Calculated compatibility profile
  
  // Additional profile fields for filtering
  industry          String?  // Tech, Fintech, Healthcare, etc.
  stage             String?  // Idea, MVP, Early Revenue, Scaling
  location          String?  // City/region
  remoteOk          Boolean  @default(true)
  timeCommitment    String?  // Full-time, Part-time, Flexible
  fundingStatus     String?  // Bootstrapped, Seeking, Funded
  companyGoals      String?  // Lifestyle, Scale, Unicorn
  workStyle         String?  // Structured, Flexible, Fast-paced
  isTechnical       Boolean?  // Can build product without outside assistance
  
  // User's personal OpenAI API key for chat functionality
  openaiApiKey      String?  // Encrypted OpenAI API key
  
  // Service Provider fields
  serviceTypes      String @default("[]") // JSON: ["development", "design", "marketing", "legal"]
  portfolio         String?  // JSON string of portfolio items
  hourlyRate        Int?     // Rate in USD
  availability      String?  // "immediate", "within_week", "within_month"
  
  // Filter preferences for discovery
  filterPreferences Json?    // Store discovery filter preferences
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // NextAuth relationships
  accounts          Account[]
  sessions          Session[]
  
  // Matching relationships
  sentMatches       Match[] @relation("MatchSender")
  receivedMatches   Match[] @relation("MatchReceiver")
  
  // Project relationships
  projects          Project[] @relation("ProjectOwner")
  projectMatches    ProjectMatch[] @relation("ServiceProvider")
  
  // Community relationships
  forumPosts        ForumPost[] @relation("PostAuthor")
  forumComments     ForumComment[] @relation("CommentAuthor")
  postLikes         PostLike[]
  commentLikes      CommentLike[]
  
  // Chatbot relationships
  conversations     ChatConversation[] @relation("UserConversations")
  memories          UserMemory[] @relation("UserMemories")
  
  // Business relationships
  businesses        Business[] @relation("UserBusinesses")
  currentBusinessId String?  // ID of the currently selected business
  currentBusiness   Business? @relation("CurrentBusiness", fields: [currentBusinessId], references: [id])
  
  @@map("users")
}

model Business {
  id                String   @id @default(uuid())
  name              String
  description       String?
  
  // Business classification
  industry          String   // Tech, Healthcare, Beauty, Food, etc.
  businessType      String   // salon, restaurant, saas, ecommerce, etc.
  subType           String?  // hair salon, pizza restaurant, b2b saas, etc.
  
  // Location & Market
  location          String?  // City, State/Region, Country
  country           String?  // For better search targeting
  targetMarket      String?  // Local, National, Global
  targetAudience    String?  // Demographics, psychographics
  
  // Business Stage & Size
  stage             String   // idea, validation, mvp, early-revenue, growth, established
  foundedYear       Int?
  teamSize          Int?
  revenueRange      String?  // 0-10k, 10k-100k, 100k-1M, 1M+
  
  // Business Model
  businessModel     String?  // B2B, B2C, B2B2C, Marketplace, etc.
  revenueModel      String?  // subscription, one-time, commission, freemium
  pricePoint        String?  // budget, mid-market, premium, luxury
  
  // Online presence
  website           String?
  socialMedia       Json?    // {instagram: "", facebook: "", linkedin: ""}
  
  // Services/Products (for service businesses like salons)
  primaryServices   Json?    // ["balayage", "cuts", "color"] for salon
  specialties       Json?    // Unique selling propositions
  
  // Competitive context
  mainCompetitors   Json?    // Known competitor names/info
  marketPosition    String?  // premium, budget, mid-market
  
  // Business goals
  shortTermGoals    String?  // Next 6 months
  longTermVision    String?  // 2-5 year vision
  
  // Metadata
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  userId            String
  user              User     @relation("UserBusinesses", fields: [userId], references: [id], onDelete: Cascade)
  
  // Users who have this as current business
  usersWithCurrent  User[]   @relation("CurrentBusiness")
  
  @@map("businesses")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Match {
  id         String    @id @default(uuid())
  senderId   String
  receiverId String
  liked      Boolean   // true = liked, false = passed
  matched    Boolean   @default(false) // true when both users like each other
  createdAt  DateTime  @default(now())
  
  sender     User @relation("MatchSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User @relation("MatchReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@unique([senderId, receiverId])
  @@map("matches")
}

model Project {
  id              String    @id @default(uuid())
  title           String
  description     String
  ownerId         String
  
  // Project requirements
  serviceType     String    // "development", "design", "marketing", "legal"
  budget          Int?      // Budget in USD
  timeline        String?   // "asap", "within_week", "within_month", "flexible"
  complexity      String?   // "simple", "medium", "complex"
  
  // Project details
  requirements    String?   // Detailed requirements
  techStack       String  @default("[]") // JSON: For development projects
  deliverables    String?   // JSON string of expected deliverables
  
  // Status
  status          String    @default("open") // "open", "in_progress", "completed", "cancelled"
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relationships
  owner           User @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  matches         ProjectMatch[]
  
  @@map("projects")
}

model ProjectMatch {
  id                String    @id @default(uuid())
  projectId         String
  serviceProviderId String
  status            String    @default("pending") // "pending", "accepted", "declined", "completed"
  proposal          String?   // Service provider's proposal
  proposedRate      Int?      // Proposed hourly rate
  proposedTimeline  String?   // Proposed timeline
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  project           Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  serviceProvider   User @relation("ServiceProvider", fields: [serviceProviderId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, serviceProviderId])
  @@map("project_matches")
}

model ForumCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String    @default("#6366f1") // Hex color for category
  icon        String?   // Icon name for category
  order       Int       @default(0) // Display order
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationships
  posts       ForumPost[]
  
  @@map("forum_categories")
}

model ForumPost {
  id            String    @id @default(uuid())
  title         String
  content       String    // Main post content
  slug          String    @unique // URL-friendly slug
  authorId      String
  categoryId    String
  
  // Post metadata
  isPinned      Boolean   @default(false)
  isLocked      Boolean   @default(false)
  views         Int       @default(0)
  
  // Engagement
  likesCount    Int       @default(0)
  commentsCount Int       @default(0)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  author        User @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  category      ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  comments      ForumComment[]
  likes         PostLike[]
  
  @@map("forum_posts")
}

model ForumComment {
  id        String    @id @default(uuid())
  content   String
  authorId  String
  postId    String
  parentId  String?   // For nested replies
  
  // Engagement
  likesCount Int      @default(0)
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relationships
  author    User @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    ForumComment? @relation("CommentThread", fields: [parentId], references: [id])
  replies   ForumComment[] @relation("CommentThread")
  likes     CommentLike[]
  
  @@map("forum_comments")
}

model PostLike {
  id     String @id @default(uuid())
  userId String
  postId String
  
  createdAt DateTime @default(now())
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@map("post_likes")
}

model CommentLike {
  id        String @id @default(uuid())
  userId    String
  commentId String
  
  createdAt DateTime @default(now())
  
  // Relationships
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment ForumComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId])
  @@map("comment_likes")
}

// Chatbot conversations and memory
model ChatConversation {
  id        String    @id @default(uuid())
  userId    String
  title     String?   // Auto-generated or user-defined title
  summary   String?   // AI-generated summary for long conversations
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relationships
  user      User @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)
  messages  ChatMessage[]
  
  @@map("chat_conversations")
}

model ChatMessage {
  id             String    @id @default(uuid())
  conversationId String
  role           String    // "user" or "assistant"
  content        String    // Message content
  metadata       Json?     // Context used, sources, confidence scores, etc.
  tokenCount     Int?      // For usage tracking
  
  createdAt      DateTime  @default(now())
  
  // Relationships
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

model UserMemory {
  id            String    @id @default(uuid())
  userId        String
  memoryType    String    // "preference", "goal", "fact", "context", "skill"
  content       String    // The actual memory content
  category      String?   // "profile", "conversation", "behavior", "feedback"
  importance    Int       @default(5) // 1-10 importance score
  confidence    Float     @default(1.0) // 0-1 confidence in this memory
  source        String?   // Where this memory came from ("conversation", "profile", "assessment")
  lastUsed      DateTime? // Track when memory was last accessed
  expiresAt     DateTime? // Optional expiration for temporary memories
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships  
  user          User @relation("UserMemories", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, memoryType])
  @@index([userId, importance])
  @@map("user_memories")
}